title = "Normalized and 50 quantile Expression",
x = "treatment",
y = "normalized expression"
)
input_mat= t(expr_normalized)
#input_mat[1:5,1:10]           # Look at first 5 rows and 10 columns
library(WGCNA)
allowWGCNAThreads()          # allow multi-threading (optional)
#> Allowing multi-threading with up to 4 threads.
# Choose a set of soft-thresholding powers
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))
# Call the network topology analysis function
sft = pickSoftThreshold(
input_mat,             # <= Input data
#blockSize = 30,
powerVector = powers,
verbose = 5
)
par(mfrow = c(1,2));
cex1 = 0.9;
dev.new()
# Your existing plot code
plot(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
xlab = "Soft Threshold (power)",
ylab = "Scale Free Topology Model Fit, signed R^2",
main = paste("Scale independence")
)
# Your existing text code
text(sft$fitIndices[, 1],
-sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
labels = powers, cex = cex1, col = "red"
)
abline(h = 0.90, col = "red")
plot(sft$fitIndices[, 1],
sft$fitIndices[, 5],
xlab = "Soft Threshold (power)",
ylab = "Mean Connectivity",
type = "n",
main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
sft$fitIndices[, 5],
labels = powers,
cex = cex1, col = "red")
picked_power = 9
temp_cor <- cor
cor <- WGCNA::cor         # Force it to use WGCNA cor function (fix a namespace conflict issue)
netwk <- blockwiseModules(input_mat,                # <= input here
# == Adjacency Function ==
power = picked_power,                # <= power here
networkType = "signed",
# == Tree and Block Options ==
deepSplit = 2,
pamRespectsDendro = F,
# detectCutHeight = 0.75,
minModuleSize = 30,
maxBlockSize = 4000,
# == Module Adjustments ==
reassignThreshold = 0,
mergeCutHeight = 0.25,
# == TOM == Archive the run results in TOM file (saves time)
saveTOMs = T,
saveTOMFileBase = "ER",
# == Output Options
numericLabels = T,
verbose = 3)
cor <- temp_cor     # Return cor function to original namespace
# Convert labels to colors for plotting
mergedColors = labels2colors(netwk$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(
netwk$dendrograms[[1]],
mergedColors[netwk$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE,
hang = 0.03,
addGuide = TRUE,
guideHang = 0.05 )
module_df <- data.frame(
gene_id = names(netwk$colors),
colors = labels2colors(netwk$colors)
)
#module_df[1:5,]
write_delim(module_df,
file = "gene_modules.txt",
delim = "\t")
# Get Module Eigengenes per cluster
MEs0 <- moduleEigengenes(input_mat, mergedColors)$eigengenes
# Reorder modules so similar modules are next to each other
MEs0 <- orderMEs(MEs0)
module_order = names(MEs0) %>% gsub("ME","", .)
# Add treatment names
MEs0$treatment = row.names(MEs0)
# tidy & plot data
mME = MEs0 %>%
pivot_longer(-treatment) %>%
mutate(
name = gsub("ME", "", name),
name = factor(name, levels = module_order)
)
mME %>% ggplot(., aes(x=treatment, y=name, fill=value)) +
geom_tile() +
theme_bw() +
scale_fill_gradient2(
low = "blue",
high = "red",
mid = "white",
midpoint = 0,
limit = c(-1,1)) +
theme(axis.text.x = element_text(angle=90)) +
labs(title = "Module-trait Relationships", y = "Modules", fill="corr")
# pick out a few modules of interest here
modules_of_interest = c("green", "turquoise", "tan")
# Pull out list of genes in that module
submod = module_df %>%
subset(colors %in% modules_of_interest)
row.names(module_df) = module_df$gene_id
# Get normalized expression for those genes
expr_normalized[1:5,1:10]
subexpr = expr_normalized[submod$gene_id,]
submod_df = data.frame(subexpr) %>%
mutate(
gene_id = row.names(.)
) %>%
pivot_longer(-gene_id) %>%
mutate(
module = module_df[gene_id,]$colors
)
submod_df %>% ggplot(., aes(x=name, y=value, group=gene_id)) +
geom_line(aes(color = module),
alpha = 0.2) +
theme_bw() +
theme(
axis.text.x = element_text(angle = 90)
) +
facet_grid(rows = vars(module)) +
labs(x = "treatment",
y = "normalized expression")
genes_of_interest = module_df %>%
subset(colors %in% modules_of_interest)
expr_of_interest = expr_normalized[genes_of_interest$gene_id,]
expr_of_interest[1:5,1:5]
TOM = TOMsimilarityFromExpr(t(expr_of_interest),
power = picked_power)
row.names(TOM) = row.names(expr_of_interest)
colnames(TOM) = row.names(expr_of_interest)
edge_list = data.frame(TOM) %>%
mutate(
gene1 = row.names(.)
) %>%
pivot_longer(-gene1) %>%
dplyr::rename(gene2 = name, correlation = value) %>%
unique() %>%
subset(!(gene1==gene2)) %>%
mutate(
module1 = module_df[gene1,]$colors,
module2 = module_df[gene2,]$colors
)
#head(edge_list)
write_delim(edge_list,
file = "edgelist.tsv",
delim = "\t")
install.packages("plotly")
library(plotly)
View(dat)
View(dat_o)
fig <- plot_ly(dat_o, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
fig
spdat <- dat_o[dat_o$expr_total>0]
spdat <- dat_o %>% filter(dat_o$expr_total>0) % select(L_1,M_1,H_1,expr_total)
library(magrittr)
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total)
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
fig
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
fig
fig <- plot_ly(spdat, x = L_1, y = M_1, z = H_1,
marker = list(color = expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = L_1, y = M_1, z = H_1,
marker = list(color = expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = L_1, y = M_1, z = H_1,
marker = list(color = expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- plot_ly(spdat, x = -L_1, y = M_1, z = H_1,
marker = list(color = expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
fig
# Generate 1000 random points
set.seed(123)  # Setting a seed for reproducibility
x <- runif(1000, min=-100, max=100)
y <- runif(1000, min=-100, max=100)
z <- runif(1000, min=-100, max=100)
# Create a 3D scatter plot
plot <- plot_ly() %>%
add_markers(x=x, y=y, z=z, type='scatter3d', mode='markers') %>%
add_surface(x=c(-100, 100), y=c(-100, 100), z=matrix(c(-100, -100, 100, 100), ncol=2), showscale=FALSE, opacity=0.2) %>%
layout(scene=list(xaxis=list(range=c(-100, 100)),
yaxis=list(range=c(-100, 100)),
zaxis=list(range=c(-100, 100))))
# Render the plot
plot
range(spdat$L_1)
l1r <- range(spdat$L_1)
m1r <- range(spdat$M_1)
h1r <- range(spdat$H_1)
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers()  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
fig
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers()  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity (log(expr))'),
yaxis = list(title = 'Medium Humidity'),
zaxis = list(title = 'High Humidity'))
)
suppressWarnings(print(fig))
suppressWarnings(fig)
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers()  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig)
# Generate 1000 random points
set.seed(123)  # Setting a seed for reproducibility
x <- runif(1000, min=-100, max=100)
y <- runif(1000, min=-100, max=100)
z <- runif(1000, min=-100, max=100)
# Create a 3D scatter plot
plot <- plot_ly() %>%
add_markers(x=x, y=y, z=z, type='scatter3d', mode='markers', size=2) %>%
add_surface(x=c(-100, 100), y=c(-100, 100), z=matrix(c(-100, -100, 100, 100), ncol=2), showscale=FALSE, opacity=0.2) %>%
layout(scene=list(xaxis=list(range=c(-100, 100)),
yaxis=list(range=c(-100, 100)),
zaxis=list(range=c(-100, 100))))
# Render the plot
plot
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers(size=2)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig)
install.packages("Rcmndr")
install.packages("Rcmdr")
install.packages("gt")
library(Rcmdr)
?colPercents
table(dat_o$expr_total>0)
library(gt)
filter_smry <- data.frame(table(dat_o$expr_total>0))
View(filter_smry)
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Pct=Freq/sum(Freq))
ft(filter_smry)
gt(filter_smry)
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("No Expression", "Any Expression"),Pct=Freq/sum(Freq))
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("No Expression", "Any Expression"),Pct=Freq/sum(Freq))
gt(filter_smry)
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("None", "Any"),Pct=Freq/sum(Freq))  %>% colnames(gsub("Var1","Gene Expr"))
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("None", "Any"),Pct=Freq/sum(Freq))  %>% colnames(gsub(.,"Var1","Gene Expr"))
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("None", "Any"),Pct=Freq/sum(Freq))  %>% gsub(colnames(.),"Var1","Gene Expr")
gt(filter_smry)
filter_smry <- data.frame(table(dat_o$expr_total>0)) %>% mutate(Var1=c("None", "Any"),Pct=Freq/sum(Freq))
gt(filter_smry)
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers(size=2)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig)
View(dat_o)
View(spdat)
fig5 <- plot_ly(spdat[5,], x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=4)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig5)
fig5 <- plot_ly(spdat[5,], x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig5)
i <- -inf
i <- -Inf
is.na(i)
i==-Inf
is.infinite(i)
spdat[is.infinite(spdat)]=0
is.infinite(spdat)
# extract data columns containing total expression count and mean at each treatment level and apply log.
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>% select(L_1,M_1,H_1,expr_total) %>% mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total)) %>%
mutate(across(everything(), ~ ifelse(. == -Inf, 0, .)))
fig <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig <- fig %>% add_markers(size=2)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig)
rownames(dat_o) <- dat_o$Gene_id
# extract data columns containing total expression count and mean at each treatment level and apply log.
spdat <- dat_o %>% filter(dat_o$expr_total>0) %>%
select(Gene_id,L_1,M_1,H_1,expr_total) %>%
mutate(L_1=log(L_1), M_1=log(M_1), H_1=log(H_1), expr_total=log(expr_total)) %>%
mutate(across(everything(), ~ ifelse(. == -Inf, 0, .)))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.9)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig5)
fig5 <- fig5 %>% add_markers(size=10, alpha=.1)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.1)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig5)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c('#FFE1A1', '#BF382A'), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]'))
)
suppressWarnings(fig5)
?add_trace
hdeg <- spdat %>% inner_join(spdat,select_var)
hdeg <- spdat %>% inner_join(spdat, data.frame("Gene_id"=select_var))
data.frame("Gene_id"=select_var)
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter", mode = "markers", color = I("red"), size=4, inherit = FALSE, name = "myPoint")
fig5
)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter", mode = "markers", color = I("red"), size=4, inherit = FALSE, name = "myPoint")
suppressWarnings(fig5)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter", mode = "markers", color = I("red"), size=4, inherit = TRUE, name = "myPoint")
suppressWarnings(fig5)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter", mode = "markers", color = I("red"), size=4, inherit = TRUE, name = "myPoint")
suppressWarnings(fig5)
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=4)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=6)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=1)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=10, alpha=.95)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=10)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=3, opacity=.1)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=10)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
fig5 <- plot_ly(spdat, x = ~L_1, y = ~M_1, z = ~H_1,
marker = list(color = ~expr_total, colorscale = c(I("gray"), I("lightgray")), showscale = TRUE))
fig5 <- fig5 %>% add_markers(size=3, opacity=.2)  %>%
add_surface(x=c(-10, 10), y=c(-10, 10), z=matrix(c(-10, -10, 10, 10), ncol=2), showscale=FALSE, opacity=0.2)
fig5 <- fig5 %>% layout(scene = list(xaxis = list(title = 'Low Humidity [log(expr)]'),
yaxis = list(title = 'Medium Humidity [log(expr)]'),
zaxis = list(title = 'High Humidity [log(expr)]')))
hdeg <- spdat %>% filter(Gene_id %in% select_var)
fig5 <- fig5 %>% add_trace(fig5, data=hdeg, x = ~L_1, y = ~M_1, z = ~H_1, type = "scatter3d", mode = "markers", color = I("red"), size=10)
suppressWarnings(fig5)
# Add the subset points in red
#p <- p %>% add_trace(data = subset_df, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'markers', marker = list(color = 'red'))
sessionInfo()
libPaths()
.libPaths()
